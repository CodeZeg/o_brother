// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RENDERDATA_H_
#define FLATBUFFERS_GENERATED_RENDERDATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

struct GPVec2D;

struct GPTrans2D;

struct GPMotionState;

struct GPRenderCharacterData;
struct GPRenderCharacterDataBuilder;

struct GPRenderData;
struct GPRenderDataBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) GPVec2D FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  GPVec2D()
      : x_(0),
        y_(0) {
  }
  GPVec2D(float _x, float _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(GPVec2D, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) GPTrans2D FLATBUFFERS_FINAL_CLASS {
 private:
  GPVec2D pos_;
  float yaw_;

 public:
  GPTrans2D()
      : pos_(),
        yaw_(0) {
  }
  GPTrans2D(const GPVec2D &_pos, float _yaw)
      : pos_(_pos),
        yaw_(::flatbuffers::EndianScalar(_yaw)) {
  }
  const GPVec2D &pos() const {
    return pos_;
  }
  float yaw() const {
    return ::flatbuffers::EndianScalar(yaw_);
  }
};
FLATBUFFERS_STRUCT_END(GPTrans2D, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) GPMotionState FLATBUFFERS_FINAL_CLASS {
 private:
  float locomotion_speed_;
  int32_t montage_id_;
  float montage_progress_;

 public:
  GPMotionState()
      : locomotion_speed_(0),
        montage_id_(0),
        montage_progress_(0) {
  }
  GPMotionState(float _locomotion_speed, int32_t _montage_id, float _montage_progress)
      : locomotion_speed_(::flatbuffers::EndianScalar(_locomotion_speed)),
        montage_id_(::flatbuffers::EndianScalar(_montage_id)),
        montage_progress_(::flatbuffers::EndianScalar(_montage_progress)) {
  }
  float locomotion_speed() const {
    return ::flatbuffers::EndianScalar(locomotion_speed_);
  }
  int32_t montage_id() const {
    return ::flatbuffers::EndianScalar(montage_id_);
  }
  float montage_progress() const {
    return ::flatbuffers::EndianScalar(montage_progress_);
  }
};
FLATBUFFERS_STRUCT_END(GPMotionState, 12);

struct GPRenderCharacterData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GPRenderCharacterDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TRANSFORM = 6,
    VT_MOTION_STATE = 8
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const GPTrans2D *transform() const {
    return GetStruct<const GPTrans2D *>(VT_TRANSFORM);
  }
  const GPMotionState *motion_state() const {
    return GetStruct<const GPMotionState *>(VT_MOTION_STATE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<GPTrans2D>(verifier, VT_TRANSFORM, 4) &&
           VerifyField<GPMotionState>(verifier, VT_MOTION_STATE, 4) &&
           verifier.EndTable();
  }
};

struct GPRenderCharacterDataBuilder {
  typedef GPRenderCharacterData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(GPRenderCharacterData::VT_ID, id, 0);
  }
  void add_transform(const GPTrans2D *transform) {
    fbb_.AddStruct(GPRenderCharacterData::VT_TRANSFORM, transform);
  }
  void add_motion_state(const GPMotionState *motion_state) {
    fbb_.AddStruct(GPRenderCharacterData::VT_MOTION_STATE, motion_state);
  }
  explicit GPRenderCharacterDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GPRenderCharacterData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GPRenderCharacterData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GPRenderCharacterData> CreateGPRenderCharacterData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const GPTrans2D *transform = nullptr,
    const GPMotionState *motion_state = nullptr) {
  GPRenderCharacterDataBuilder builder_(_fbb);
  builder_.add_motion_state(motion_state);
  builder_.add_transform(transform);
  builder_.add_id(id);
  return builder_.Finish();
}

struct GPRenderData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GPRenderDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GENERATION = 4,
    VT_CHARACTER0 = 6,
    VT_MONSTERS = 8
  };
  int32_t generation() const {
    return GetField<int32_t>(VT_GENERATION, 0);
  }
  const GPRenderCharacterData *character0() const {
    return GetPointer<const GPRenderCharacterData *>(VT_CHARACTER0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<GPRenderCharacterData>> *monsters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<GPRenderCharacterData>> *>(VT_MONSTERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_GENERATION, 4) &&
           VerifyOffset(verifier, VT_CHARACTER0) &&
           verifier.VerifyTable(character0()) &&
           VerifyOffset(verifier, VT_MONSTERS) &&
           verifier.VerifyVector(monsters()) &&
           verifier.VerifyVectorOfTables(monsters()) &&
           verifier.EndTable();
  }
};

struct GPRenderDataBuilder {
  typedef GPRenderData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_generation(int32_t generation) {
    fbb_.AddElement<int32_t>(GPRenderData::VT_GENERATION, generation, 0);
  }
  void add_character0(::flatbuffers::Offset<GPRenderCharacterData> character0) {
    fbb_.AddOffset(GPRenderData::VT_CHARACTER0, character0);
  }
  void add_monsters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GPRenderCharacterData>>> monsters) {
    fbb_.AddOffset(GPRenderData::VT_MONSTERS, monsters);
  }
  explicit GPRenderDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GPRenderData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GPRenderData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GPRenderData> CreateGPRenderData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t generation = 0,
    ::flatbuffers::Offset<GPRenderCharacterData> character0 = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GPRenderCharacterData>>> monsters = 0) {
  GPRenderDataBuilder builder_(_fbb);
  builder_.add_monsters(monsters);
  builder_.add_character0(character0);
  builder_.add_generation(generation);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GPRenderData> CreateGPRenderDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t generation = 0,
    ::flatbuffers::Offset<GPRenderCharacterData> character0 = 0,
    const std::vector<::flatbuffers::Offset<GPRenderCharacterData>> *monsters = nullptr) {
  auto monsters__ = monsters ? _fbb.CreateVector<::flatbuffers::Offset<GPRenderCharacterData>>(*monsters) : 0;
  return CreateGPRenderData(
      _fbb,
      generation,
      character0,
      monsters__);
}

inline const GPRenderData *GetGPRenderData(const void *buf) {
  return ::flatbuffers::GetRoot<GPRenderData>(buf);
}

inline const GPRenderData *GetSizePrefixedGPRenderData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GPRenderData>(buf);
}

inline bool VerifyGPRenderDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GPRenderData>(nullptr);
}

inline bool VerifySizePrefixedGPRenderDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GPRenderData>(nullptr);
}

inline void FinishGPRenderDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GPRenderData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGPRenderDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GPRenderData> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_RENDERDATA_H_
