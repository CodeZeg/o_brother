// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_GPINPUT_STATE_DATA: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_GPINPUT_STATE_DATA: u8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_GPINPUT_STATE_DATA: [GPInputStateData; 2] = [
  GPInputStateData::NONE,
  GPInputStateData::GPInputMoveData,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct GPInputStateData(pub u8);
#[allow(non_upper_case_globals)]
impl GPInputStateData {
  pub const NONE: Self = Self(0);
  pub const GPInputMoveData: Self = Self(1);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::GPInputMoveData,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::GPInputMoveData => Some("GPInputMoveData"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for GPInputStateData {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for GPInputStateData {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for GPInputStateData {
    type Output = GPInputStateData;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for GPInputStateData {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for GPInputStateData {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for GPInputStateData {}
pub struct GPInputStateDataUnionTableOffset {}

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_GPINPUT_ACTION_DATA: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_GPINPUT_ACTION_DATA: u8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_GPINPUT_ACTION_DATA: [GPInputActionData; 2] = [
  GPInputActionData::NONE,
  GPInputActionData::InputAction_ChoseCard,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct GPInputActionData(pub u8);
#[allow(non_upper_case_globals)]
impl GPInputActionData {
  pub const NONE: Self = Self(0);
  pub const InputAction_ChoseCard: Self = Self(1);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::InputAction_ChoseCard,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::InputAction_ChoseCard => Some("InputAction_ChoseCard"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for GPInputActionData {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for GPInputActionData {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for GPInputActionData {
    type Output = GPInputActionData;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for GPInputActionData {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for GPInputActionData {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for GPInputActionData {}
pub struct GPInputActionDataUnionTableOffset {}

pub enum GPInputMoveDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GPInputMoveData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GPInputMoveData<'a> {
  type Inner = GPInputMoveData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GPInputMoveData<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Y: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GPInputMoveData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GPInputMoveDataArgs
  ) -> flatbuffers::WIPOffset<GPInputMoveData<'bldr>> {
    let mut builder = GPInputMoveDataBuilder::new(_fbb);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.finish()
  }


  #[inline]
  pub fn x(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(GPInputMoveData::VT_X, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn y(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(GPInputMoveData::VT_Y, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GPInputMoveData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("x", Self::VT_X, false)?
     .visit_field::<f32>("y", Self::VT_Y, false)?
     .finish();
    Ok(())
  }
}
pub struct GPInputMoveDataArgs {
    pub x: f32,
    pub y: f32,
}
impl<'a> Default for GPInputMoveDataArgs {
  #[inline]
  fn default() -> Self {
    GPInputMoveDataArgs {
      x: 0.0,
      y: 0.0,
    }
  }
}

pub struct GPInputMoveDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GPInputMoveDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_x(&mut self, x: f32) {
    self.fbb_.push_slot::<f32>(GPInputMoveData::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f32) {
    self.fbb_.push_slot::<f32>(GPInputMoveData::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GPInputMoveDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GPInputMoveDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GPInputMoveData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GPInputMoveData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GPInputMoveData");
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.finish()
  }
}
pub enum InputAction_ChoseCardOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct InputAction_ChoseCard<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for InputAction_ChoseCard<'a> {
  type Inner = InputAction_ChoseCard<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> InputAction_ChoseCard<'a> {
  pub const VT_CARD_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    InputAction_ChoseCard { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args InputAction_ChoseCardArgs
  ) -> flatbuffers::WIPOffset<InputAction_ChoseCard<'bldr>> {
    let mut builder = InputAction_ChoseCardBuilder::new(_fbb);
    builder.add_card_id(args.card_id);
    builder.finish()
  }


  #[inline]
  pub fn card_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(InputAction_ChoseCard::VT_CARD_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for InputAction_ChoseCard<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("card_id", Self::VT_CARD_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct InputAction_ChoseCardArgs {
    pub card_id: u32,
}
impl<'a> Default for InputAction_ChoseCardArgs {
  #[inline]
  fn default() -> Self {
    InputAction_ChoseCardArgs {
      card_id: 0,
    }
  }
}

pub struct InputAction_ChoseCardBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> InputAction_ChoseCardBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_card_id(&mut self, card_id: u32) {
    self.fbb_.push_slot::<u32>(InputAction_ChoseCard::VT_CARD_ID, card_id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> InputAction_ChoseCardBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    InputAction_ChoseCardBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<InputAction_ChoseCard<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for InputAction_ChoseCard<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("InputAction_ChoseCard");
      ds.field("card_id", &self.card_id());
      ds.finish()
  }
}
pub enum GPInputPlayerDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GPInputPlayerData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GPInputPlayerData<'a> {
  type Inner = GPInputPlayerData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GPInputPlayerData<'a> {
  pub const VT_STATE_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_STATE: flatbuffers::VOffsetT = 6;
  pub const VT_ACTION_TYPE: flatbuffers::VOffsetT = 8;
  pub const VT_ACTION: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GPInputPlayerData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GPInputPlayerDataArgs
  ) -> flatbuffers::WIPOffset<GPInputPlayerData<'bldr>> {
    let mut builder = GPInputPlayerDataBuilder::new(_fbb);
    if let Some(x) = args.action { builder.add_action(x); }
    if let Some(x) = args.state { builder.add_state(x); }
    builder.add_action_type(args.action_type);
    builder.add_state_type(args.state_type);
    builder.finish()
  }


  #[inline]
  pub fn state_type(&self) -> GPInputStateData {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GPInputStateData>(GPInputPlayerData::VT_STATE_TYPE, Some(GPInputStateData::NONE)).unwrap()}
  }
  #[inline]
  pub fn state(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(GPInputPlayerData::VT_STATE, None)}
  }
  #[inline]
  pub fn action_type(&self) -> GPInputActionData {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GPInputActionData>(GPInputPlayerData::VT_ACTION_TYPE, Some(GPInputActionData::NONE)).unwrap()}
  }
  #[inline]
  pub fn action(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(GPInputPlayerData::VT_ACTION, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn state_as_gpinput_move_data(&self) -> Option<GPInputMoveData<'a>> {
    if self.state_type() == GPInputStateData::GPInputMoveData {
      self.state().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { GPInputMoveData::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn action_as_input_action_chose_card(&self) -> Option<InputAction_ChoseCard<'a>> {
    if self.action_type() == GPInputActionData::InputAction_ChoseCard {
      self.action().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { InputAction_ChoseCard::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for GPInputPlayerData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<GPInputStateData, _>("state_type", Self::VT_STATE_TYPE, "state", Self::VT_STATE, false, |key, v, pos| {
        match key {
          GPInputStateData::GPInputMoveData => v.verify_union_variant::<flatbuffers::ForwardsUOffset<GPInputMoveData>>("GPInputStateData::GPInputMoveData", pos),
          _ => Ok(()),
        }
     })?
     .visit_union::<GPInputActionData, _>("action_type", Self::VT_ACTION_TYPE, "action", Self::VT_ACTION, false, |key, v, pos| {
        match key {
          GPInputActionData::InputAction_ChoseCard => v.verify_union_variant::<flatbuffers::ForwardsUOffset<InputAction_ChoseCard>>("GPInputActionData::InputAction_ChoseCard", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct GPInputPlayerDataArgs {
    pub state_type: GPInputStateData,
    pub state: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub action_type: GPInputActionData,
    pub action: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for GPInputPlayerDataArgs {
  #[inline]
  fn default() -> Self {
    GPInputPlayerDataArgs {
      state_type: GPInputStateData::NONE,
      state: None,
      action_type: GPInputActionData::NONE,
      action: None,
    }
  }
}

pub struct GPInputPlayerDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GPInputPlayerDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_state_type(&mut self, state_type: GPInputStateData) {
    self.fbb_.push_slot::<GPInputStateData>(GPInputPlayerData::VT_STATE_TYPE, state_type, GPInputStateData::NONE);
  }
  #[inline]
  pub fn add_state(&mut self, state: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GPInputPlayerData::VT_STATE, state);
  }
  #[inline]
  pub fn add_action_type(&mut self, action_type: GPInputActionData) {
    self.fbb_.push_slot::<GPInputActionData>(GPInputPlayerData::VT_ACTION_TYPE, action_type, GPInputActionData::NONE);
  }
  #[inline]
  pub fn add_action(&mut self, action: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GPInputPlayerData::VT_ACTION, action);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GPInputPlayerDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GPInputPlayerDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GPInputPlayerData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GPInputPlayerData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GPInputPlayerData");
      ds.field("state_type", &self.state_type());
      match self.state_type() {
        GPInputStateData::GPInputMoveData => {
          if let Some(x) = self.state_as_gpinput_move_data() {
            ds.field("state", &x)
          } else {
            ds.field("state", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("state", &x)
        },
      };
      ds.field("action_type", &self.action_type());
      match self.action_type() {
        GPInputActionData::InputAction_ChoseCard => {
          if let Some(x) = self.action_as_input_action_chose_card() {
            ds.field("action", &x)
          } else {
            ds.field("action", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("action", &x)
        },
      };
      ds.finish()
  }
}
pub enum GPInputDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GPInputData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GPInputData<'a> {
  type Inner = GPInputData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GPInputData<'a> {
  pub const VT_PLAYER_INPUTS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GPInputData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GPInputDataArgs<'args>
  ) -> flatbuffers::WIPOffset<GPInputData<'bldr>> {
    let mut builder = GPInputDataBuilder::new(_fbb);
    if let Some(x) = args.player_inputs { builder.add_player_inputs(x); }
    builder.finish()
  }


  #[inline]
  pub fn player_inputs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GPInputPlayerData<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GPInputPlayerData>>>>(GPInputData::VT_PLAYER_INPUTS, None)}
  }
}

impl flatbuffers::Verifiable for GPInputData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<GPInputPlayerData>>>>("player_inputs", Self::VT_PLAYER_INPUTS, false)?
     .finish();
    Ok(())
  }
}
pub struct GPInputDataArgs<'a> {
    pub player_inputs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GPInputPlayerData<'a>>>>>,
}
impl<'a> Default for GPInputDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    GPInputDataArgs {
      player_inputs: None,
    }
  }
}

pub struct GPInputDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GPInputDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_player_inputs(&mut self, player_inputs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<GPInputPlayerData<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GPInputData::VT_PLAYER_INPUTS, player_inputs);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GPInputDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GPInputDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GPInputData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GPInputData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GPInputData");
      ds.field("player_inputs", &self.player_inputs());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `GPInputData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gpinput_data_unchecked`.
pub fn root_as_gpinput_data(buf: &[u8]) -> Result<GPInputData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<GPInputData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `GPInputData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_gpinput_data_unchecked`.
pub fn size_prefixed_root_as_gpinput_data(buf: &[u8]) -> Result<GPInputData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<GPInputData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `GPInputData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gpinput_data_unchecked`.
pub fn root_as_gpinput_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GPInputData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<GPInputData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `GPInputData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gpinput_data_unchecked`.
pub fn size_prefixed_root_as_gpinput_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GPInputData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<GPInputData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a GPInputData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `GPInputData`.
pub unsafe fn root_as_gpinput_data_unchecked(buf: &[u8]) -> GPInputData {
  flatbuffers::root_unchecked::<GPInputData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed GPInputData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `GPInputData`.
pub unsafe fn size_prefixed_root_as_gpinput_data_unchecked(buf: &[u8]) -> GPInputData {
  flatbuffers::size_prefixed_root_unchecked::<GPInputData>(buf)
}
#[inline]
pub fn finish_gpinput_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<GPInputData<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_gpinput_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<GPInputData<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
