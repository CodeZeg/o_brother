// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::math_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

// struct GPMotionState, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct GPMotionState(pub [u8; 12]);
impl Default for GPMotionState { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for GPMotionState {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("GPMotionState")
      .field("locomotion_speed", &self.locomotion_speed())
      .field("montage_id", &self.montage_id())
      .field("montage_progress", &self.montage_progress())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for GPMotionState {}
impl<'a> flatbuffers::Follow<'a> for GPMotionState {
  type Inner = &'a GPMotionState;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a GPMotionState>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a GPMotionState {
  type Inner = &'a GPMotionState;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<GPMotionState>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for GPMotionState {
    type Output = GPMotionState;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const GPMotionState as *const u8, <Self as flatbuffers::Push>::size());
        dst.copy_from_slice(src);
    }
    #[inline]
    fn alignment() -> flatbuffers::PushAlignment {
        flatbuffers::PushAlignment::new(4)
    }
}

impl<'a> flatbuffers::Verifiable for GPMotionState {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> GPMotionState {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    locomotion_speed: f32,
    montage_id: i32,
    montage_progress: f32,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_locomotion_speed(locomotion_speed);
    s.set_montage_id(montage_id);
    s.set_montage_progress(montage_progress);
    s
  }

  pub fn locomotion_speed(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_locomotion_speed(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn montage_id(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<<i32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_montage_id(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn montage_progress(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_montage_progress(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

pub enum GPRenderCharacterDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GPRenderCharacterData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GPRenderCharacterData<'a> {
  type Inner = GPRenderCharacterData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GPRenderCharacterData<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TRANSFORM: flatbuffers::VOffsetT = 6;
  pub const VT_MOTION_STATE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GPRenderCharacterData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GPRenderCharacterDataArgs<'args>
  ) -> flatbuffers::WIPOffset<GPRenderCharacterData<'bldr>> {
    let mut builder = GPRenderCharacterDataBuilder::new(_fbb);
    if let Some(x) = args.motion_state { builder.add_motion_state(x); }
    if let Some(x) = args.transform { builder.add_transform(x); }
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GPRenderCharacterData::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn transform(&self) -> Option<&'a GPTrans2D> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GPTrans2D>(GPRenderCharacterData::VT_TRANSFORM, None)}
  }
  #[inline]
  pub fn motion_state(&self) -> Option<&'a GPMotionState> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GPMotionState>(GPRenderCharacterData::VT_MOTION_STATE, None)}
  }
}

impl flatbuffers::Verifiable for GPRenderCharacterData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("id", Self::VT_ID, false)?
     .visit_field::<GPTrans2D>("transform", Self::VT_TRANSFORM, false)?
     .visit_field::<GPMotionState>("motion_state", Self::VT_MOTION_STATE, false)?
     .finish();
    Ok(())
  }
}
pub struct GPRenderCharacterDataArgs<'a> {
    pub id: i32,
    pub transform: Option<&'a GPTrans2D>,
    pub motion_state: Option<&'a GPMotionState>,
}
impl<'a> Default for GPRenderCharacterDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    GPRenderCharacterDataArgs {
      id: 0,
      transform: None,
      motion_state: None,
    }
  }
}

pub struct GPRenderCharacterDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GPRenderCharacterDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: i32) {
    self.fbb_.push_slot::<i32>(GPRenderCharacterData::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_transform(&mut self, transform: &GPTrans2D) {
    self.fbb_.push_slot_always::<&GPTrans2D>(GPRenderCharacterData::VT_TRANSFORM, transform);
  }
  #[inline]
  pub fn add_motion_state(&mut self, motion_state: &GPMotionState) {
    self.fbb_.push_slot_always::<&GPMotionState>(GPRenderCharacterData::VT_MOTION_STATE, motion_state);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GPRenderCharacterDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GPRenderCharacterDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GPRenderCharacterData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GPRenderCharacterData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GPRenderCharacterData");
      ds.field("id", &self.id());
      ds.field("transform", &self.transform());
      ds.field("motion_state", &self.motion_state());
      ds.finish()
  }
}
pub enum GPRenderDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GPRenderData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GPRenderData<'a> {
  type Inner = GPRenderData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GPRenderData<'a> {
  pub const VT_GENERATION: flatbuffers::VOffsetT = 4;
  pub const VT_CHARACTER0: flatbuffers::VOffsetT = 6;
  pub const VT_MONSTERS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GPRenderData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GPRenderDataArgs<'args>
  ) -> flatbuffers::WIPOffset<GPRenderData<'bldr>> {
    let mut builder = GPRenderDataBuilder::new(_fbb);
    if let Some(x) = args.monsters { builder.add_monsters(x); }
    if let Some(x) = args.character0 { builder.add_character0(x); }
    builder.add_generation(args.generation);
    builder.finish()
  }


  #[inline]
  pub fn generation(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GPRenderData::VT_GENERATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn character0(&self) -> Option<GPRenderCharacterData<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<GPRenderCharacterData>>(GPRenderData::VT_CHARACTER0, None)}
  }
  #[inline]
  pub fn monsters(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GPRenderCharacterData<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GPRenderCharacterData>>>>(GPRenderData::VT_MONSTERS, None)}
  }
}

impl flatbuffers::Verifiable for GPRenderData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("generation", Self::VT_GENERATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<GPRenderCharacterData>>("character0", Self::VT_CHARACTER0, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<GPRenderCharacterData>>>>("monsters", Self::VT_MONSTERS, false)?
     .finish();
    Ok(())
  }
}
pub struct GPRenderDataArgs<'a> {
    pub generation: i32,
    pub character0: Option<flatbuffers::WIPOffset<GPRenderCharacterData<'a>>>,
    pub monsters: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GPRenderCharacterData<'a>>>>>,
}
impl<'a> Default for GPRenderDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    GPRenderDataArgs {
      generation: 0,
      character0: None,
      monsters: None,
    }
  }
}

pub struct GPRenderDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GPRenderDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_generation(&mut self, generation: i32) {
    self.fbb_.push_slot::<i32>(GPRenderData::VT_GENERATION, generation, 0);
  }
  #[inline]
  pub fn add_character0(&mut self, character0: flatbuffers::WIPOffset<GPRenderCharacterData<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<GPRenderCharacterData>>(GPRenderData::VT_CHARACTER0, character0);
  }
  #[inline]
  pub fn add_monsters(&mut self, monsters: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<GPRenderCharacterData<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GPRenderData::VT_MONSTERS, monsters);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GPRenderDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GPRenderDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GPRenderData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GPRenderData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GPRenderData");
      ds.field("generation", &self.generation());
      ds.field("character0", &self.character0());
      ds.field("monsters", &self.monsters());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `GPRenderData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gprender_data_unchecked`.
pub fn root_as_gprender_data(buf: &[u8]) -> Result<GPRenderData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<GPRenderData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `GPRenderData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_gprender_data_unchecked`.
pub fn size_prefixed_root_as_gprender_data(buf: &[u8]) -> Result<GPRenderData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<GPRenderData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `GPRenderData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gprender_data_unchecked`.
pub fn root_as_gprender_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GPRenderData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<GPRenderData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `GPRenderData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gprender_data_unchecked`.
pub fn size_prefixed_root_as_gprender_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GPRenderData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<GPRenderData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a GPRenderData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `GPRenderData`.
pub unsafe fn root_as_gprender_data_unchecked(buf: &[u8]) -> GPRenderData {
  flatbuffers::root_unchecked::<GPRenderData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed GPRenderData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `GPRenderData`.
pub unsafe fn size_prefixed_root_as_gprender_data_unchecked(buf: &[u8]) -> GPRenderData {
  flatbuffers::size_prefixed_root_unchecked::<GPRenderData>(buf)
}
#[inline]
pub fn finish_gprender_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<GPRenderData<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_gprender_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<GPRenderData<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
