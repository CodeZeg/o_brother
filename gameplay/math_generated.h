// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATH_GAMEPLAY_H_
#define FLATBUFFERS_GENERATED_MATH_GAMEPLAY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace gameplay {

struct GPVec2D;

struct GPTrans2D;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) GPVec2D FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  GPVec2D()
      : x_(0),
        y_(0) {
  }
  GPVec2D(float _x, float _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(GPVec2D, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) GPTrans2D FLATBUFFERS_FINAL_CLASS {
 private:
  gameplay::GPVec2D pos_;
  float yaw_;

 public:
  GPTrans2D()
      : pos_(),
        yaw_(0) {
  }
  GPTrans2D(const gameplay::GPVec2D &_pos, float _yaw)
      : pos_(_pos),
        yaw_(::flatbuffers::EndianScalar(_yaw)) {
  }
  const gameplay::GPVec2D &pos() const {
    return pos_;
  }
  float yaw() const {
    return ::flatbuffers::EndianScalar(yaw_);
  }
};
FLATBUFFERS_STRUCT_END(GPTrans2D, 12);

}  // namespace gameplay

#endif  // FLATBUFFERS_GENERATED_MATH_GAMEPLAY_H_
